package src.main.kotlin

import AdventCalendarDay
import java.math.BigInteger
import kotlin.math.abs

private const val START_SYMBOL = 'S'

private const val END_SYMBOL = 'E'

class Day12 : AdventCalendarDay("input_day12.txt") {

    class Edge(x: Int, y : Int) : Day14.Point(x,y){
        var distance = Int.MAX_VALUE
    }


    override fun part1Impl(): Int {

        val map = mutableListOf<List<Int>>()

        inputLines.forEach {map.add(it.map { c -> getTransformedValue(c)})}

        val absoluteStartPosition = map.flatten().indexOf(getTransformedValue(START_SYMBOL))
        val startPoint = Edge(absoluteStartPosition%map[0].size, absoluteStartPosition/map[0].size)
        startPoint.distance=0
        val absoluteEndPosition = map.flatten().indexOf(getTransformedValue(END_SYMBOL))
        val endPoint = Edge(absoluteEndPosition%map[0].size, absoluteEndPosition/map[0].size)

        val pointToDistance = mutableMapOf<Edge, Int>()

        val path = mutableListOf<Edge>()
        path.add(startPoint)

        advanceAndUpdateDistance(startPoint, path, map, pointToDistance, Int.MAX_VALUE)

        return pointToDistance[endPoint]!!
    }

    private fun advanceAndUpdateDistance( startPoint: Edge, path: MutableList<Edge>, map: List<List<Int>>, pointToDistance: MutableMap<Edge, Int>, maxSize : Int){

        //println("Path $path")
        val possibilities =
            listOf(getPointRight(startPoint), getPointUp(startPoint), getPointDown(startPoint), getPointLeft(startPoint))
                .filter { isLegal(startPoint, it, map) && !path.contains(it)}

        if(map[startPoint.y][startPoint.x] == getTransformedValue(END_SYMBOL) && (path.size == 375 || path.size == 376 || path.size == 374)){
            printPath(path, map[0].size, map.size)
        }

        val currentDistance = startPoint.distance
        if(currentDistance > maxSize){
            return
        }
        possibilities.forEach {
            //update distance
            if(pointToDistance.contains(it) && pointToDistance[it]!! <= currentDistance+1){
                return@forEach
            }
            pointToDistance[it] = currentDistance+1
            it.distance = currentDistance+1
            //recurse on possibilities
            path.add(it)
            advanceAndUpdateDistance(it, path, map, pointToDistance, maxSize)
            path.remove(it)
        }
    }

    private fun printPath(path: MutableList<Edge>, xSize : Int, ySize : Int){
        println("Displaying path")
        for(y in 0 until ySize){
            for(x in 0 until xSize){
                if(path.remove(Edge(x,y))){
                    print('#')
                }else{
                    print('.')
                }
            }
            println()
        }
    }

    private fun getTransformedValue(c : Char) : Int{
        return if (START_SYMBOL == c){
            'a'.code-1
        }else if(END_SYMBOL == c){
            'z'.code+1
        }else{c.code }
    }

    private fun getPointUp(startPoint: Edge) : Edge{
        return Edge(startPoint.x , startPoint.y-1)
    }

    private fun getPointDown(startPoint: Edge) : Edge{
        return Edge(startPoint.x , startPoint.y+1)
    }

    private fun getPointRight(startPoint: Edge) : Edge{
        return Edge(startPoint.x+1 , startPoint.y)
    }

    private fun getPointLeft(startPoint: Edge) : Edge{
        return Edge(startPoint.x-1 , startPoint.y)
    }

    private fun isLegal(startPoint: Edge, endPoint: Edge, map : List<List<Int>>) : Boolean {
        return endPoint.x >= 0 && endPoint.y >= 0 && endPoint.x < map[0].size && endPoint.y < map.size
                && map[endPoint.y][endPoint.x] - map[startPoint.y][startPoint.x] <= 1 /* at most 1 if climbing or anything if descending*/
    }

    override fun part2Impl(): BigInteger {
        val map = mutableListOf<List<Int>>()

        inputLines.forEach {map.add(it.map { c -> getTransformedValue(c)})}

        val absoluteEndPosition = map.flatten().indexOf(getTransformedValue(END_SYMBOL))
        val endPoint = Edge(absoluteEndPosition%map[0].size, absoluteEndPosition/map[0].size)

        val pointToDistance = mutableMapOf<Edge, Int>()

        /**
         * Idea is that the shortest path necessary begin with 'a' letter and has a direct neighbour 'b'
         * Also, we know that path has a length <= Part 1 (380)
         */
        val shortest = map.asSequence().flatten().mapIndexed { index, _ -> Edge(index%map[0].size, index/map[0].size) }
            .filter { map[it.y][it.x] == 'a'.code }
            .sortedBy { abs(endPoint.x-it.x) + abs(endPoint.y-it.y) }
            .filter { (it.y+1 < map.size && map[it.y+1][it.x].toChar() == 'b')
                        || (it.y>0 && map[it.y-1][it.x].toChar() == 'b')
                        || (it.x+1 < map[0].size && map[it.y][it.x+1].toChar() == 'b')
                        || (it.x > 0 && map[it.y][it.x-1].toChar() == 'b')}
            .minOfOrNull {
                pointToDistance.clear()
                val path = mutableListOf<Edge>()
                path.add(it)
                it.distance=0

                advanceAndUpdateDistance(it, path, map, pointToDistance, part1Impl())

                if(pointToDistance[endPoint] != null){
                    return@minOfOrNull pointToDistance[endPoint]!!
                }
                return@minOfOrNull Int.MAX_VALUE
            }

        return shortest!!.toBigInteger()
    }


    /**
     * Part 1 Sploiler
     */
    /*.................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .....................................................................................#########...................
    ....................................................................................##.......#########...........
    ...................................................................................##................##..........
    ...................................................................................#..#######.........##.........
    .....................##################............................................#.##.....#########..#.........
    ....................##................#...........................................##.#..............#..#.........
    ...............######.................#...........................................#..#..##########..#..#.........
    ..............##......................#...........................................#..#.##........#..#..#.........
    ..............#.......................#####......................................##..#.#.........#..#..#.........
    ..............#...........................####..................................##.###.#.........#..#..#.........
    ...############..............................#.................................##.##..##.........#..#..#.........
    ####.........................................#................................##.##.###..........#..#..#.........
    #............................................#####............................#..#..#...###......#..#..#.........
    .................................................######.......................#..#..#...###......#..#..#.........
    ......................................................##########..............#..#..#...#........#..#..#.........
    ...............................................................#..............#..#..#...##.......#..#..#.........
    ...............................................................###............#..##.####.#.......#..#..#.........
    .................................................................#########....##..###..####..#####..#..#.........
    .........................................................................#.....##...##..#.####......#..#.........
    .........................................................................#......###..##.#......######..#.........
    .........................................................................##.......##..#.##...###......##.........
    ..........................................................................#........##.##.#####......###..........
    ..........................................................................########..#..#........#####............
    .................................................................................##.##.##.....###................
    ..................................................................................#..#..#######..................
    ..................................................................................##.##..........................
    ...................................................................................#..###........................
    ...................................................................................##...######...................
    ....................................................................................##.......#...................
    .....................................................................................###.....#...................
    .......................................................................................#.....#...................
    .......................................................................................#.....#...................
    .......................................................................................#######...................*/


    /**
     * Part 2 Sploiler
     */
    /*.................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .................................................................................................................
    .....................................................................................#########...................
    ....................................................................................##.......#########...........
    ...................................................................................##................##..........
    ...................................................................................#..#######.........##.........
    .....................##################............................................#.##.....#########..#.........
    ....................##................#...........................................##.#..............#..#.........
    ...............######.................#...........................................#..#..##########..#..#.........
    ################......................#...........................................#..#.##........#..#..#.........
    ......................................#####......................................##..#.#.........#..#..#.........
    ..........................................####..................................##.###.#.........#..#..#.........
    .............................................#.................................##.##..##.........#..#..#.........
    .............................................#................................##.##.###..........#..#..#.........
    .............................................#####............................#..#..#...###......#..#..#.........
    .................................................######.......................#..#..#...###......#..#..#.........
    ......................................................##########..............#..#..#...#........#..#..#.........
    ...............................................................#..............#..#..#...##.......#..#..#.........
    ...............................................................###............#..##.####.#.......#..#..#.........
    .................................................................#########....##..###..####..#####..#..#.........
    .........................................................................#.....##...##..#.####......#..#.........
    .........................................................................#......###..##.#......######..#.........
    .........................................................................##.......##..#.##...###......##.........
    ..........................................................................#........##.##.#####......###..........
    ..........................................................................########..#..#........#####............
    .................................................................................##.##.##.....###................
    ..................................................................................#..#..#######..................
    ..................................................................................##.##..........................
    ...................................................................................#..###........................
    ...................................................................................##...######...................
    ....................................................................................##.......#...................
    .....................................................................................###.....#...................
    .......................................................................................#.....#...................
    .......................................................................................#.....#...................
    .......................................................................................#######...................*/
}